<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">

<sqlMap namespace="CommUsr">
	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>
	<resultMap id="CommUsrList" class="egovframework.admin.basicinf.service.CommUsr">
		<result property="usrCd"      column="USR_CD"       />
		<result property="usrNm"      column="USR_NM"       />
		<result property="orgCd"      column="ORG_CD"       />
		<result property="accYn"      column="ACC_YN"       />
		<result property="accCd"      column="ACC_CD"       />
	</resultMap>
	
	<resultMap id="CommUsrListCheck" class="egovframework.admin.basicinf.service.CommUsr">
		<result property="usrCd"      column="USR_CD"       />
		<result property="usrNm"      column="USR_NM"       />
		<result property="orgCd"      column="ORG_CD"       />
		<result property="orgNm"      column="ORG_NM"       />
		<result property="accYn"      column="ACC_YN"       />
		<result property="accCd"      column="ACC_CD"       />
		<result property="usrId"      column="USR_ID"       />
		<result property="accokYn"    column="ACCOK_YN"       />
		<result property="naidId"     column="NAID_ID"       />
		<result property="naidCd"     column="NAID_CD"       />
		<result property="accokYn"    column="ACCOK_YN"       />
		<result property="pwDttm"     column="PW_DTTM"       />
	</resultMap>
	
	<resultMap id="CommUsrDtlList" class="egovframework.admin.basicinf.service.CommUsr" extends="CommUsrList">
		<result property="usrCd"   			column="USR_CD"   />
		<result property="usrNmEng"   		column="USR_NM_ENG"   />
		<result property="usrEmail"   		column="USR_EMAIL"    />
		<result property="usrTel"     		column="USR_TEL"      />
		<result property="orgNm"      		column="ORG_NM"       />
		<result property="useYn"      		column="USE_YN"       />
		<result property="jobCd"      		column="JOB_CD"       />
		<result property="emailYn"    		column="EMAIL_YN"       />
		<result property="emailId"   		column="EMAIL_ID"       />
		<result property="emailDomain"      column="EMAIL_DOMAIN"       />
		<result property="firUsrTel"   		column="FIR_USR_TEL"       />
		<result property="midUsrTel"   		column="MID_USR_TEL"       />
		<result property="lastUsrTel"  		column="LAST_USR_TEL"       />
		<result property="firUsrHp"  		column="FIR_USR_HP"       />
		<result property="midUsrHp"  		column="MID_USR_HP"       />
		<result property="lastUsrHp"  		column="LAST_USR_HP"       />
		<result property="regId"      		column="REG_ID"       />
		<result property="regDttm"    		column="REG_DTTM"     />
		<result property="updId"      		column="UPD_ID"       />
		<result property="updDttm"    		column="UPD_DTTM"     />
		<result property="hpYn"    		column="HP_YN"     />
		<result property="deptNm"    		column="DEPT_NM"     />
	</resultMap>
	
<!-- 	  AND USR_PW = FN_SCP_EDC_STR('H', #usrPw#)  -->
	<select id="CommUsrDAO.selectCommUsrCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultMap="CommUsrListCheck" >
		SELECT USR_CD
			 , USR_NM
		     , ORG_CD 
		     , ORG_NM        
		     , ACC_YN
		     , ACC_CD
		     , USR_ID
		     , ACCOK_YN
		     , NAID_CD
		     , NAID_ID
		     , ACCOK_YN
		     , CASE WHEN ROUND(SYSDATE - PW_DTTM) > 100		THEN 'false'
				    WHEN PW_DTTM IS NULL					THEN 'false'
					ELSE 'true'								END AS PW_DTTM
		  FROM TB_COMM_USR
		 WHERE USR_ID = #usrId#
		   AND USR_PW = #usrPw#
		   AND USE_YN ='Y'
		   AND ACC_YN ='Y'
		   AND ( (#menuSysDcd# = 'ADM' AND ACC_CD = 'SYS') OR
		         (#menuSysDcd# = 'REG')
		        )
	</select> 
	
	<select id="CommUsrDAO.selectCommUsrListAll" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultMap="CommUsrDtlList" >
	SELECT *
	  FROM(
		SELECT ROWNUM AS RN, TB.*
		  FROM
		  (
			SELECT   A.USR_CD
					,A.USR_NM
			        ,A.ORG_CD
			        ,B.ORG_NM
			        ,A.ACC_YN
			        ,A.ACC_CD
			        ,A.USR_NM_ENG
			        ,A.USR_EMAIL as USR_EMAIL 
			        ,A.USR_TEL
			        ,A.HP_YN
			        ,SUBSTR((A.USR_EMAIL), 1, INSTR((A.USR_EMAIL), '@')-1) EMAIL_ID
			        ,SUBSTR((A.USR_EMAIL), INSTR((A.USR_EMAIL), '@')+1, LENGTH((A.USR_EMAIL))) EMAIL_DOMAIN
			        ,EMAIL_YN
			        ,SUBSTR(A.USR_TEL, 1, INSTR(A.USR_TEL, '-')-1) FIR_USR_TEL
			        ,SUBSTR(SUBSTR(A.USR_TEL, INSTR(A.USR_TEL, '-')+1, LENGTH(A.USR_TEL)), 
			        		1, 
			        		INSTR(SUBSTR(A.USR_TEL, INSTR(A.USR_TEL, '-')+1, LENGTH(A.USR_TEL)), '-')-1) MID_USR_TEL
			        ,SUBSTR(SUBSTR(A.USR_TEL, INSTR(A.USR_TEL, '-')+1, LENGTH(A.USR_TEL)), 
			        		INSTR(SUBSTR(A.USR_TEL, INSTR(A.USR_TEL, '-')+1, LENGTH(A.USR_TEL)), '-')+1, 
			        		LENGTH(SUBSTR(A.USR_TEL, INSTR(A.USR_TEL, '-')+1, LENGTH(A.USR_TEL)))) LAST_USR_TEL
			        ,DECODE(A.USE_YN, 'Y', 1, 'N', 0) USE_YN
			        
					,SUBSTR(( A.USR_HP), 1, INSTR(( A.USR_HP), '-')-1) FIR_USR_HP
			        ,SUBSTR(SUBSTR(( A.USR_HP), INSTR((A.USR_HP), '-')+1, LENGTH((A.USR_HP))), 
			        		1, 
			        		INSTR(SUBSTR((A.USR_HP), INSTR(( A.USR_HP), '-')+1, LENGTH(( A.USR_HP))), '-')-1) MID_USR_HP
			        ,SUBSTR(SUBSTR((A.USR_HP), INSTR((A.USR_HP), '-')+1, LENGTH(A.USR_TEL)), 
			        		INSTR(SUBSTR((A.USR_HP), INSTR((A.USR_HP), '-')+1, LENGTH((A.USR_HP))), '-')+1, 
			        		LENGTH(SUBSTR((A.USR_HP), INSTR((A.USR_HP), '-')+1, LENGTH((A.USR_HP))))) LAST_USR_HP
			        ,A.JOB_CD
			        ,A.REG_ID
			        ,A.REG_DTTM
			        ,A.UPD_ID
			        ,A.UPD_DTTM
			        ,A.DEPT_NM
		  FROM TB_COMM_USR A
		 LEFT OUTER JOIN TB_COMM_ORG B
		   ON A.ORG_CD = B.ORG_CD
		 WHERE 1=1
		   AND A.ACC_CD NOT IN('DATA','NAID') 
			<isNotEmpty property="searchWord" >
				AND A.USR_NM LIKE '%'||#searchWord#||'%'
			</isNotEmpty>
			<isNotEmpty property="orgNm" > <!-- 조직부서명 검색  -->
				AND B.ORG_NM LIKE '%' || #orgNm# || '%'
			</isNotEmpty>
			<isEqual property="useYn" compareValue="Y" >
				AND A.USE_YN = 'Y'
			</isEqual>	
			<isEqual property="useYn" compareValue="N" >
				AND A.USE_YN = 'N'
			</isEqual>
			<isNotEmpty property="iOrderBy">
				ORDER  BY $iOrderBy$
			</isNotEmpty>		
		)TB
	)
	<isNotEqual prepend="startPage" compareValue="0">
		WHERE RN BETWEEN #startPage# AND #endPage#
	</isNotEqual>
	</select>
	
	<select id="CommUsrDAO.selectCommUsrListAllCnt" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer">
			SELECT   COUNT(*)
		  FROM TB_COMM_USR A
		 LEFT OUTER JOIN TB_COMM_ORG B
		   ON A.ORG_CD = B.ORG_CD
		 WHERE 1=1
		   AND A.ACC_CD NOT IN('DATA','NAID') 
			<isNotEmpty property="searchWord" >
				<isEqual property="searchWd" compareValue="1">
				AND A.USR_NM LIKE '%'||#searchWord#||'%'
				</isEqual>
				<isEqual property="searchWd" compareValue="2">
				AND A.USR_NM_ENG LIKE '%'||#searchWord#||'%'
				</isEqual>
			</isNotEmpty>
			<isNotEmpty property="orgNm" > <!-- 조직부서명 검색  -->
				AND B.ORG_NM LIKE '%' || #orgNm# || '%'
			</isNotEmpty>
			<isEqual property="useYn" compareValue="Y" >
				AND A.USE_YN = 'Y'
			</isEqual>	
			<isEqual property="useYn" compareValue="N" >
				AND A.USE_YN = 'N'
			</isEqual>
	</select>
	
	<select id="CommUsrDAO.selectCommUsrList" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultMap="CommUsrDtlList" >
			SELECT   A.USR_CD
			        ,A.USR_NM
			        ,A.ORG_CD
			        ,B.ORG_NM
			        ,A.HP_YN
			        ,A.ACC_YN
			        ,A.ACC_CD
			        ,A.USR_NM_ENG
			        ,A.USR_EMAIL as USR_EMAIL 
			        ,A.USR_TEL
			        ,SUBSTR((A.USR_EMAIL), 1, INSTR((A.USR_EMAIL), '@')-1) EMAIL_ID
			        ,SUBSTR((A.USR_EMAIL), INSTR((A.USR_EMAIL), '@')+1, LENGTH((A.USR_EMAIL))) EMAIL_DOMAIN
			        ,EMAIL_YN
			        ,'' FIR_USR_TEL
			        ,'' MID_USR_TEL
			        ,'' LAST_USR_TEL
	        		,A.USR_HP FIR_USR_HP
	        		,'' MID_USR_HP
	        		,'' LAST_USR_HP
			        ,A.USE_YN
			        ,A.JOB_CD
			        ,A.REG_ID
			        ,A.REG_DTTM
			        ,A.UPD_ID
			        ,A.UPD_DTTM
			        ,A.USR_ID
			        ,A.USR_PW
			        ,A.DEPT_NM
		  FROM TB_COMM_USR A
		LEFT OUTER JOIN TB_COMM_ORG B
		   ON A.ORG_CD = B.ORG_CD
		 WHERE 1=1 
		   AND A.USR_CD = #usrCd#
	</select>
	
	<!-- 이메일,핸드폰 임시로 입력안하면 안들어가게했음.. 수정예정  -->
	<insert id="CommUsrDAO.insert" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
			INSERT INTO TB_COMM_USR
			(USR_CD, USR_NM, USR_NM_ENG
			<isNotEmpty property="emailId" >
			  	<isNotEmpty property="emailDomain">
			, USR_EMAIL
				</isNotEmpty>
			 </isNotEmpty>
			, USR_TEL
			  <isNotEmpty property="firUsrHp">
			, USR_HP
			 </isNotEmpty>
			 , ORG_CD, EMAIL_YN,HP_YN, EMAIL_DTTM, JOB_CD,
			 USE_YN, REG_ID, REG_DTTM, UPD_ID, 
			 UPD_DTTM,USR_ID, USR_PW, DEPT_NM
			 , ORG_NM, PW_DTTM)
			VALUES
			( 
				(SELECT NVL(MAX(USR_CD)+1,'7000001') FROM TB_COMM_USR)
			  , #usrNm#
			  , #usrNmEng#
			   <isNotEmpty property="emailId" >
			  	<isNotEmpty property="emailDomain">
			  ,#emailId# || '@' || #emailDomain#
			  	</isNotEmpty>
			  </isNotEmpty>
			  , #usrTel#
			  /* 휴대폰번호 암호화 */
			    <isNotEmpty property="firUsrHp"  >
			  , #firUsrHp#
			  </isNotEmpty>
			  , #orgCd#
			  , DECODE(NVL(#emailYn#, 'N'), 'N', 'N', 'Y')	/* 이메일 수신여부 설정 */
			  , DECODE(NVL(#hpYn#, 'N'), 'N', 'N', 'Y')	/* 핸드폰 수신여부 설정 */
			  , sysdate
			  , #jobCd#
			  , #useYn#
			  , #sessionUsrId#, sysdate, #sessionUsrId#, sysdate, #usrId#, #usrPw#, #deptNm#   
			  , (SELECT ORG_NM FROM TB_COMM_ORG WHERE ORG_CD = #orgCd#)
			  , SYSDATE
			 )
	</insert>
	
	
	<!-- 이메일,핸드폰 임시로 입력안하면 안들어가게했음.. 수정예정  지저분..-->
	<update id="CommUsrDAO.update" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
			UPDATE TB_COMM_USR 
			   SET USR_NM = #usrNm#
			      ,USR_NM_ENG = #usrNmEng#
			      <isNotEmpty property="emailId" >
			  		<isNotEmpty property="emailDomain">
			      ,USR_EMAIL = #emailId# || '@' || #emailDomain#
			      	</isNotEmpty>
				   </isNotEmpty>
				   
				   <isEmpty property="emailId" >
			  		<isEmpty property="emailDomain">
			  		,USR_EMAIL = NULL
			  		</isEmpty>
			  	   </isEmpty>
			  	   
			      ,USR_TEL = #usrTel#
			      <isNotEmpty property="firUsrHp"  >
			      ,USR_HP = #firUsrHp#
				   </isNotEmpty>
				    <isEmpty property="firUsrHp"  >
			      ,USR_HP = NULL
				   </isEmpty>
				   
			      ,ORG_CD = #orgCd#
			      ,ORG_NM = (SELECT ORG_NM FROM TB_COMM_ORG WHERE ORG_CD = #orgCd#)
			      ,USE_YN = #useYn#
			      ,EMAIL_YN = DECODE(NVL(#emailYn#, 'N'), 'N', 'N', 'Y')
			      ,HP_YN = DECODE(NVL(#hpYn#, 'N'), 'N', 'N', 'Y')
			      ,EMAIL_DTTM = sysdate
			      ,JOB_CD = #jobCd#
			      ,UPD_ID = #sessionUsrId#
			      ,UPD_DTTM = sysdate
			      ,DEPT_NM = #deptNm#
			 WHERE USR_CD = #usrCd# 
	</update>
	
	<delete id="CommUsrDAO.delete" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
		<![CDATA[
			DELETE FROM TB_COMM_USR 
			WHERE USR_CD = #usrCd#
		]]>
	</delete>
	
	<update id="CommUsrDAO.saveCommUsrFailCnt" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
		UPDATE TB_COMM_USR 
		SET FAIL_CNT = DECODE(0, #failCnt#, 0, (SELECT NVL(FAIL_CNT, 0) + 1 FROM TB_COMM_USR WHERE USR_ID = #usrId#))
		WHERE USR_ID = #usrId#
	</update>
	
	<select id="CommUsrDAO.selectCommUsrIdChk" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer">
		SELECT   NVL(COUNT(*), 0)
		  FROM   TB_COMM_USR
		 WHERE   1=1 
		   AND   USE_YN ='Y'
		   AND   USR_ID = #usrId#
	</select>
	
	<select id="CommUsrDAO.selectCommUsrFailCnt" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer">
		SELECT CASE WHEN CNT = 0 THEN 0
		            ELSE (SELECT SUM(NVL(FAIL_CNT, 0)) 
		                    FROM TB_COMM_USR 
		                   WHERE USE_YN ='Y' 
		                     AND USR_ID = #usrId#
		                  ) 
		       END FAIL_CNT
		FROM (SELECT NVL(COUNT(*), 0) AS CNT
		        FROM TB_COMM_USR
		       WHERE 1 = 1 
		         AND USE_YN ='Y' 
		         AND USR_ID = #usrId#
		     )
	</select>
			
	<select id="CommUsrDAO.selectCommUsrChangePwDttm" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.util.HashMap">
		SELECT   NVL(TRUNC(SYSDATE - PW_DTTM), 0) "pwDttm"
		  	   , REQ_PW_YN "reqPwYn"
		  FROM   TB_COMM_USR
		 WHERE   USE_YN = 'Y'
		   AND   USR_ID = #usrId#
	</select>	
	
	<update id="CommUsrDAO.saveCommUsrChangePw" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
		UPDATE   TB_COMM_USR
		   SET   USR_PW = FN_SCP_EDC_STR('H', #pwdNew1#)
		       , REQ_PW_YN = 'N'
		       , PW_DTTM = SYSDATE
		 WHERE   USR_ID = #usrId#    
	</update>	
	
	<update id="CommUsrDAO.savePkiReg" parameterClass="egovframework.admin.basicinf.service.CommUsr" >
		UPDATE TB_COMM_USR
		   SET USR_PKI = FN_SCP_EDC_STR('H', #usrPki#)
		     , PKI_DTTM = SYSDATE
         WHERE USR_ID = #usrId#		     
	</update>
	
	<select id="CommUsrDAO.selectCommUsrPkiCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultMap="CommUsrListCheck" >
			SELECT   USR_CD
					,USR_NM
			        ,ORG_CD         
			        ,ORG_NM
			        ,ACC_YN
			        ,ACC_CD
			        ,USR_ID
			        ,ACCOK_YN
			        ,NAID_CD
			        ,NAID_ID
			        ,ACCOK_YN
			        , CASE WHEN ROUND(SYSDATE - PW_DTTM) > 100		THEN 'false'
				    WHEN PW_DTTM IS NULL					THEN 'false'
					ELSE 'true'								END AS PW_DTTM
		  FROM TB_COMM_USR
		 WHERE USR_PKI = #usrPki#
		   AND USE_YN ='Y'
		   AND ACC_YN ='Y'
	</select> 
	
	<select id="CommUsrDAO.selectQNACnt"  resultClass="java.lang.Integer">
		SELECT COUNT(*)
		  FROM TB_BBS_LIST
		 WHERE 1=1
		   AND BBS_CD =  'QNA01'
		   AND DEL_YN = 'N'
		   AND NOTICE_YN ='N'
		   AND ANS_STATE  IN('RW','AW')
	</select>
	
	<select id="CommUsrDAO.selectGalleryCnt"  resultClass="java.lang.Integer">
		SELECT COUNT(*)
		  FROM TB_BBS_LIST
		 WHERE 1=1
		   AND BBS_CD =  'GALLERY'
		   AND DEL_YN = 'N'
		   AND NOTICE_YN ='N'
		   AND ANS_STATE  IN('RW','AW')
	</select>
	

	<insert id="CommUsrDAO.insertLogCommUsr" parameterClass="egovframework.admin.basicinf.service.CommUsr">
		<selectKey keyProperty="seq" resultClass="int">
			SELECT NVL(MAX(SEQ), 0)+1 AS seq
			FROM TB_LOG_COMM_USR
		</selectKey>
		INSERT INTO TB_LOG_COMM_USR
			(SEQ, USR_ID, USR_IP, USR_AGENT, STATUS, REG_DTTM)
		VALUES
			(#seq#, #usrId#, #usrIp#, NVL(#usrAgent#, 'ETC'), #status#, SYSDATE)
	</insert>
	
	<!-- 사용자 정보를 조회한다. 권한이 naid,data 가 아니며 인증을 안했을때 -->
	<select id="CommUsrDAO.selectCommUsrInfo" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer">
		SELECT   COUNT(*)
		  FROM TB_COMM_USR
		 WHERE USR_CD = #usrCd#
		   AND ACC_CD NOT IN('NAID','DATA')
		   AND RAUTH_YN = 'N'
	</select>
	
	<!-- AccCd 권한 체크하여 sys,admin 인 경우만 업무처리정보 볼수있다. -->
	<select id="CommUsrDAO.selectAccCdCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer">
		SELECT COUNT(*)
		  FROM TB_COMM_USR
		 WHERE USR_ID = #usrId#
		   AND ACC_CD IN('SYS','ADMIN')
	</select>
	
	<select id="CommUsrDAO.selectDupPki" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer" >
		SELECT NVL(COUNT(*), 0)
		  FROM TB_COMM_USR
		 WHERE USR_PKI = FN_SCP_EDC_STR('H', #usrPki#)
	</select>
	
	<!-- 비밀번호 변경시 기존의 비밀번호로 변경못하도록 체크한다.  -->
	<select id="CommUsrDAO.selectUserPwCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer" >
		SELECT COUNT(*)
		  FROM TB_COMM_USR
		 WHERE 1=1
		   AND USR_ID = #usrId#
		   AND USR_PW = FN_SCP_EDC_STR('H', #pwdNew1#)
	</select>
	
	<!-- GPIN 관리자 중복체크 -->
	<select id="CommUsrDAO.gpinAdminDupCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultClass="java.lang.Integer" >
		SELECT NVL(COUNT(*), 0)
		  FROM TB_COMM_USR
		 WHERE RAUTH_VID = FN_SCP_EDC_STR('E', #rauthVid#)
		   AND RAUTH_DI = FN_SCP_EDC_STR('E', #rauthDi#)
	</select>
	
	<!-- Sys 관리자 로그인 변경 확인 용 -->
	<select id="CommUsrDAO.selectSysCommUsrCheck" parameterClass="egovframework.admin.basicinf.service.CommUsr" resultMap="CommUsrListCheck" >
		SELECT USR_CD
			 , USR_NM
		     , ORG_CD 
		     , ORG_NM        
		     , ACC_YN
		     , ACC_CD
		     , USR_ID
		     , ACCOK_YN
		     , NAID_CD
		     , NAID_ID
		     , ACCOK_YN
		     , CASE WHEN ROUND(SYSDATE - PW_DTTM) > 100		THEN 'false'
				    WHEN PW_DTTM IS NULL					THEN 'false'
					ELSE 'true'								END AS PW_DTTM
		  FROM TB_COMM_USR
		 WHERE USR_CD = #usrCd#
		   AND USE_YN ='Y'
		   AND ACC_YN ='Y'
		   AND ( (#menuSysDcd# = 'ADM' AND ACC_CD = 'SYS') OR
		         (#menuSysDcd# = 'REG')
		        )
	</select> 
</sqlMap>
